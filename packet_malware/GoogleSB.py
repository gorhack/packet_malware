import requests
import api_keys


class GSB(object):
    def __init__(self):
        self.gsb_api_key = api_keys.google_safe_browsing
        self.name = "packet_malware"
        self.version = "1.0"

        # parameters for URL in post request
        self.url = 'https://sb-ssl.google.com/safebrowsing/api/lookup?'
        self.count = 0
        self.response = ''

    def analyzeUrls(self, urls2analyze):
        print(urls2analyze)
        if len(urls2analyze) == 0:
            print("No urls to analyze")
            return self.response

        urls = urls2analyze
        workingCount = urls

        if (len(workingCount)) > 500:
            workingCount = urls[0:500]
            urls = urls[500:]
        else:
            urls = 0

        payload = str(len(workingCount))
        for url in workingCount:
            payload += "\n" + url

        self.post_params = {
            "client": self.name,
            "key": self.gsb_api_key,
            "appver": self.version,
            "pver": "3.1"
        }
        with requests.Session() as s:
            try:
                r = s.post(self.url,
                           params=self.post_params,
                           data=payload,
                           timeout=5)
                print(payload)
                print(r.text)
                print(r.status_code)
            except(requests.exceptions.RequestException) as e:
                if self.count > 5:
                        self.count = 0
                        print("Too many connection failures, " +
                              "GSB may be down: {}".format(e))
                        raise RuntimeError("Error posting to " +
                                           "GSB") from e

                else:
                    print("Error sending URLs to GSB")
                    self.count += 1
                    self.urls2analyze = urls2analyze + workingCount
                    return self.analyzeUrls(urls2analyze)
        # if len(urls) > 0:
        #    analyzeUrls(urls)


# def analyzeFile():
#     """analyzes file to determine percentage of malware related URLs"""
#     totalMalware = 0
#     logFile = open("postLog_{0}_{1}.txt".format(os.path.splitext(path)[0], dateTimeNow), "r+")
#     # print("Analyzing and saving to file.")
#     tempLog = logFile.read()
#     for line in tempLog.splitlines()[:]:
#         if line == "malware":
#             totalMalware += 1
#     analysis = ("\nMalware Associated URLs: " + str((totalMalware / (totalCount)) * 100) + "% "
#                 + str(totalMalware) + " / " + str(totalCount) + "\nValid URLs: " +
#                 str(((totalCount - totalMalware) / (totalCount)) * 100) + "% " + str(totalCount - totalMalware) +
#                 " / " + str(totalCount))
#     logFile.write(analysis)
#     # close files
#     logFile.close()

# # begin
# postBodyCreator([], '')
# # print("Complete.")

if __name__ == '__main__':
    urls = ['http://Fianfette.org',
            'http://akadns.net',
            'estudiobarco.com.ar']
    g = GSB()
    resp = g.analyzeUrls(urls)
    print(g.response)
