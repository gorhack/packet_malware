"""
Assemble PCAP files and return hash of all carved files
"""

# Reading pcaps
import sys

# Local classes
import config.api_keys as api_keys
import Host.host2gsb as host2gsb
import Host.pcap as pcap


import File.hash2metadefender as hash2metadefender
import File.extractor as extractor

import UI.Grapher as Grapher
import UI.Printer as Printer


def main(packet_path, tcpflow_outdir):
    responses = []

    # convert the pcap to Host
    # returns resp, local_hosts, dns_servers, hosts
    (to_hosts_resp,
     local_hosts,
     dns_servers,
     hosts) = pcap.to_hosts(packet_path)
    responses.append(to_hosts_resp)

    # scan all hosts with Google Safe Browsing
    # https://developers.google.com/safe-browsing/lookup_guide
    (host_scan_resp,
     scanned_hosts) = host2gsb.scan(api_keys.google_safe_browsing,
                                    hosts)
    responses.append(host_scan_resp)

    # extract files from pcap, return dictionary (hash : File) of all hashes
    hashes = extractor.extract(packet_path, tcpflow_outdir)

    # scan all hashes with Metadefender Cloud API
    # https://www.metadefender.com/public-api#!/about
    (hash_scan_resp,
     hash_results) = hash2metadefender.scan(api_keys.metadefender,
                                            hashes)
    responses.append(hash_scan_resp)

    # now analyze hosts with files...
    (analyzed_resp, analyzedPcap) = pcap.analyze(local_hosts,
                                                 scanned_hosts,
                                                 hashes)
    responses.append(analyzed_resp)

    Printer.print_results(responses)
    Grapher.graphPcap(analyzedPcap)


if __name__ == '__main__':
    print("="*78)
    import sys
    if len(sys.argv) < 2:
        print("Use: python PCAP.py [pcap] [outdir]\n")
        sys.exit(1)
    packet_path = sys.argv[1]
    if len(sys.argv) == 3:
        tcpflow_outdir = sys.argv[2]
    else:
        tcpflow_outdir = sys.argv[1] + '_output'

    main(packet_path, tcpflow_outdir)
