from . import File
import os
import re
import hashlib

# constants
SKIP_FILES = [b'PNG', b'JPEG', b'GIF', b'icon']


def tcpflower(pcap_file, outdir='tcpflow_capture'):
    """
    Creates directory with all tcp streams from a pcap file in the
    specified output directory.
    """
    # follow tcp stream and scan for all objects
    if os.path.exists(outdir):
        print("Pcap already tested..running analysis\n")
    else:
        cmd = 'tcpflow -a -r {} -o {}'.format(pcap_file, outdir)
        p = os.popen(cmd).readlines()


def get_filenames(path):
    """
    Given a path, return a list of all files
    """
    files = []
    for file in os.scandir(path):
        files.append(file.name)
    return files


def correctIP(ip):
    """
    tcpflow adds leading zero's to filenames,
    this function removes them
    """

    ip = ip.split('.')
    newip = ''
    for i in ip:
        if i.lstrip('0') == '':
            newip += '0.'
        else:
            newip += i.lstrip('0') + '.'

    return newip[:-1]


def extract(pcap_file, tcpflow_outdir):
    """
    takes the extracted files from tcpflow and returns
    a dictionary of the hash : File object
    """
    tcpflower(pcap_file, tcpflow_outdir)

    # have all file names
    files = get_filenames(tcpflow_outdir)
    hashes = dict()
    for f in files:
        # regex to match file name type for objects
        p = re.compile(".*\d{3}(\.\d{3}){3}\.\d{5}\-\d{3}(\.\d{3}){3}\.\d{5}\-")
        if p.match(f):
            import magic

            full_file_path = "{}/{}".format(tcpflow_outdir, f)
            type_test = magic.from_file(full_file_path)

            # skip any file that is identified as any type in SKIP_FILES
            if not any(st in type_test for st in SKIP_FILES):
                with open(full_file_path, 'rb') as d_file:
                    data = d_file.read()
                    md5_hash = hashlib.md5(data).hexdigest().upper()
                    hashes[md5_hash] = File(f,  # name
                                            type_test.decode('utf-8',
                                                             'ignore'),  # file type
                                            md5_hash,  # md5
                                            correctIP(f[:15]),  # src ip address
                                            f[16:21],  # src port
                                            correctIP(f[22:37]),  # dst ip address
                                            f[38:43])  # dst port

    return hashes
