"""
Assemble PCAP files and return hash of all carved files
"""

# Reading pcaps
from scapy.all import *
from scapy.utils import rdpcap
import os
import sys

import hashlib
import re

# Local classes
from Host.Host import Host
from Host.LocalHost import LocalHost
from Host.PcapAnalyzer import PcapAnalyzer
import Host.host2gsb as host2gsb
import Host.pcap as pcap


from File.File import File
import File.hash2metadefender as hash2metadefender
import File.extractor as extractor

import UI.Grapher as Grapher
import UI.Printer as Printer


# APIs
from Host.GoogleSB import GSB  # 10k requests/24hrs
from File.Metadefender import Metadefender  # 1500 hashes/hr


def tcpflower(pcap_file, outdir='tcpflow_capture'):
    """
    Creates directory with all tcp streams from a pcap file in the
    specified output directory.
    """
    # follow tcp stream and scan for all objects
    if os.path.exists(tcpflow_outdir):
        print("Pcap already tested..running analysis\n")
    else:
        cmd = 'tcpflow -a -r {} -o {}'.format(pcap_file, outdir)
        p = os.popen(cmd).readlines()


def main(packet_path, tcpflow_outdir):
    responses = []

    # extract files from pcap, return dictionary (hash : File) of all hashes
    hashes = extractor.extract(packet_path, tcpflow_outdir)

    # scan all hashes with Metadefender Cloud API
    # https://www.metadefender.com/public-api#!/about
    (hash_scan_resp, hash_results) = hash2metadefender.scan(hashes)
    responses.append(hash_scan_resp)

    # convert the pcap to Host
    # returns resp, local_hosts, dns_servers, hosts
    (to_hosts_resp, local_hosts, dns_servers, hosts) = pcap.to_hosts(pcap_file)
    responses.append(to_hosts_resp)

    # scan all hosts with Google Safe Browsing
    # https://developers.google.com/safe-browsing/lookup_guide
    (host_scan_resp, scanned_hosts) = host2gsb.scan(hosts)
    responses.append(host_scan_resp)

    # now analyze hosts with files...
    (analyzed_resp, analyzedPcap) = pcap.analyze(local_hosts,
                                                 scanned_hosts,
                                                 hashes)
    responses.append(analyzed_resp)

    Printer(responses)
    Grapher.graphPcap(analyzedPcap)


if __name__ == '__main__':
    print("="*78)
    import sys
    if len(sys.argv) < 2:
        print("Use: python PCAP.py [pcap] [outdir]\n")
        sys.exit(1)
    packet_path = sys.argv[1]
    if len(sys.argv) == 3:
        tcpflow_outdir = sys.argv[2]
    else:
        tcpflow_outdir = sys.argv[1] + '_output'

    main()
